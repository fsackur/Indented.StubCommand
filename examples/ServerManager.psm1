# Name: ServerManager
# Version: 2.0.0.0
# CreatedOn: 2017-05-11 16:17:06Z

Add-Type '

namespace Microsoft.Windows.ServerManager.Commands
{
    public class Feature
    {
        // Constructor
        public Feature(System.String name) { }
        public Feature(System.Management.Automation.PSObject feature) { }
        
        // Property
        public System.String Name { get; set; }
        public System.String DisplayName { get; set; }
        public System.String Description { get; set; }
        public System.Boolean Installed { get; set; }
        public Microsoft.Windows.ServerManager.Commands.InstallState InstallState { get; set; }
        public System.String FeatureType { get; set; }
        public System.String Path { get; set; }
        public System.Int32 Depth { get; set; }
        public System.String[] DependsOn { get; set; }
        public System.String Parent { get; set; }
        public System.Management.Automation.PSObject ServerComponentDescriptor { get; set; }
        public System.String[] SubFeatures { get; set; }
        public System.String[] SystemService { get; set; }
        public Microsoft.Windows.ServerManager.ServerComponentManager.Internal.Notification[] Notification { get; set; }
        public System.String BestPracticesModelId { get; set; }
        public System.String EventQuery { get; set; }
        public System.Boolean PostConfigurationNeeded { get; set; }
        public System.Collections.Hashtable AdditionalInfo { get; set; }
        
        // Fabricated constructor
        private Feature() { }
        public static Feature CreateTypeInstance()
        {
            return new Feature();
        }
    }
}

namespace Microsoft.Windows.ServerManager.Commands
{
    public enum InstallState : int
    {
        Available = 0,
        Installed = 1,
        UninstallPending = 2,
        InstallPending = 3,
        NotPresent = 4,
        Removed = 5,
        Unknown = 6
    }
}

namespace Microsoft.Windows.ServerManager.ServerComponentManager.Internal
{
    public class Notification
    {
        public bool IsSecondaryStubType = true;
        
        public Notification() { }
    }
}
'

function Add-WindowsFeature {
    <#
    .SYNOPSIS
        Installs one or more roles, role services, or features on either the local or a specified remote server that is running Windows Server 2012 R2. This cmdlet is equivalent to and replaces Add-WindowsFeature, the cmdlet that was used to install roles, role services, and features in Windows Server 2008 R2.
    .PARAMETER Name
        Specifies a list of features to install. This parameter does not support wildcard characters. If this parameter is specified, then the ConfigurationFilePath parameter cannot be used.
    .PARAMETER ConfigurationFilePath
        Provides a single path to a configuration file which specifies roles and features to be installed, and any configuration parameters needed. The path can be specified by using a local relative path (such as D:\myfolder) or by using built-in environment variables prefixed with the $env tag (such as $env:systemdrive\filename). A configuration file can be generated by running the Add Roles and Features Wizard in Server Manager.

        If this parameter is specified, then the Name parameter cannot be used.
    .PARAMETER Vhd
        Specifies the path to an offline VHD. The path can either point to a VHD file, or to a location on which the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.

        The VHD can be on a local disk on the target computer, or on a network shared folder. If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD. In this case, the computer account of the computer that you are using to mount the VHD must have read and write permissions (Read/Write permissions in the File Sharing dialog box, or Full Control on the Security tab of the folder Properties dialog box) on the shared folder, or the VHD will not be accessible. Local loopback UNC paths are not supported. Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.

        Add the ComputerName parameter to specify the target computer you want to use to mount the VHD. If the ComputerName parameter is not specified, then the local computer is used. The computer that you are using to mount the VHD must be running Windows Server 2012 R2. Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
    .PARAMETER Restart
        Specifies that the target computer is restarted automatically, if a restart is required by the installation process for the specified roles or features. This parameter cannot be used with the Vhd parameter.
    .PARAMETER IncludeAllSubFeature
        Specifies that all subordinate role services, and all subfeatures of parent roles, role services, or features specified by the Name parameter should be installed.
    .PARAMETER IncludeManagementTools
        Specifies that all applicable management tools of the roles, role services, or features specified by the Name parameter should be installed. Note: Although management tools are installed by default when you are installing features by using the Add Roles and Features Wizard, management tools are not installed by default when you install features by using the Install-WindowsFeature cmdlet; this parameter must be added to install management tools.
    .PARAMETER Source
        Specifies the path to feature files, if the files are not available in the local feature store of the target computer or VHD. Valid values for this parameter are either a network path or the path to a Windows image file (WIM). If you are installing roles or features on an offline VHD, you must use a mounted WIM. It is not necessary to mount the WIM file for installing on a running physical computer, because a WIM is mounted internally for deployments to a physical computer. Specify the path by using a local relative path, or by using built-in environment variables that are prefixed with the $env tag as shown in the following examples.

        The path specified in this parameter is only used if the command cannot find feature files in the local side-by-side store of the specified target computer or VHD. The command searches for feature files in the following order:

        1)?On the target computer or offline VHD.

        2)?Path specified as the value of this parameter. If you add a UNC path, verify that the computer account of the target server has Read permissions on the share. The computer account should be in one of the following formats: DOMAIN\SERVERNAME$ or SERVER$

        3)?Repository path specified by the Group Policy Object (GPO), Specify settings for optional component installation and component repair, located in Computer Configuration/Administrative Templates/System in Local Group Policy Editor. This Group Policy setting controls the following Windows Registry setting: HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Servicing\LocalSourcePath.

        4)?Windows Update.

        This parameter is optional.
    .PARAMETER ComputerName
        Installs one or more available roles, role services, and features on a specified remote computer. This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified, the default target is the local computer.

        Valid values for the parameter include a NetBIOS name, an IP address, or a fully qualified domain name of a remote computer that is running Windows Server

        To use an IP address of a remote computer as the value of this parameter, your command must include the Credential parameter. The computer must either be configured for HTTPS transport, or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local computer. For information about adding a computer name to the WinRM TrustedHosts list, see ?How to Add a Computer to the Trusted Host List? in about_Remote_Troubleshooting.
    .PARAMETER Credential
        Specifies a user account that has access rights to perform this action. If the parameter is not added, or no value is specified, the default value of this parameter is the current user. Enter a user name in one of the following formats. Quotation marks are optional.

        ???"UserName"

        ???"Domain\User"

        ???"User@Domain.com"

        ??? A Credential object returned by the Get-Credential cmdlet.

        If a user name is entered, then a prompt for a password is displayed.
    .PARAMETER LogPath
        Specifies a name and path to a log file. Add this parameter if the results of your command must be stored in a log.
    #>
    
    [CmdletBinding(DefaultParameterSetName='ComponentNamesAndRunningComputer', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.Windows.ServerManager.Commands.Feature[]]
        ${Name},
        
        [Parameter(ParameterSetName='ConfigurationFile', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConfigurationFilePath},
        
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath', Mandatory=$true)]
        [Parameter(ParameterSetName='ConfigurationFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Vhd},
        
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [Parameter(ParameterSetName='ConfigurationFile')]
        [switch]
        ${Restart},
        
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath')]
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [switch]
        ${IncludeAllSubFeature},
        
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath')]
        [switch]
        ${IncludeManagementTools},
        
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Source},
        
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},
        
        [ValidateNotNullOrEmpty()]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${LogPath}
    )
}

function Remove-WindowsFeature {
    <#
    .SYNOPSIS
        Uninstalls specified Windows Server roles, role services, and features from a computer that is running Windows Server 2012 R2. By adding the Remove parameter, also deletes feature files, or payload, from a computer. This cmdlet replaces Remove-WindowsFeature, the cmdlet that was used to uninstall roles, role services, and features in Windows Server 2008 R2.
    .PARAMETER Name
        Specifies a list of features to uninstall. This parameter does not support wildcard characters.
    .PARAMETER Vhd
        Specifies the path to an offline VHD. The path can either point to a VHD file, or to a location on which the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.

        The VHD can be on a local disk on the target computer, or on a network shared folder. If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD. In this case, the computer account of the computer that you are using to mount the VHD must have read and write permissions (Read/Write permissions in the File Sharing dialog box, or Full Control on the Security tab of the folder Properties dialog box) on the shared folder, or the VHD will not be accessible. Local loopback UNC paths are not supported. Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.

        Add the ComputerName parameter to specify the target computer you want to use to mount the VHD. If the ComputerName parameter is not specified, then the local computer is used. The computer that you are using to mount the VHD must be running Windows Server 2012 R2. Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
    .PARAMETER Restart
        Specifies that the target computer is restarted automatically, if a restart is required by the uninstallation process for the specified roles or features. This parameter cannot be used with the Vhd parameter.
    .PARAMETER IncludeManagementTools
        Specifies the uninstallation of all applicable management tools along with the roles, role services, or features that are specified in the Name parameter. Note that by default, management tools are not uninstalled when you run the Uninstall-WindowsFeature cmdlet; you must add this parameter to uninstall associated management tools.
    .PARAMETER Remove
        Deletes feature files for the specified roles, role services, and features from the side-by-side store, located at %SystemDrive%:\Windows\WinSxS. If the feature is not yet uninstalled, the command uninstalls the feature.

        When you delete feature files, features that depend upon the files you remove are also deleted. When you delete feature files for a subfeature, and no other subfeatures for the parent feature are installed, then files for the entire parent role or feature are deleted.
    .PARAMETER ComputerName
        Uninstalls and optionally removes one or more roles, role services, and features from a specified remote computer. This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified, the default target is the local computer.

        Valid values for the parameter include a NetBIOS name, an IP address, or a fully qualified domain name of a remote computer that is running Windows Server.

        To use an IP address of a remote computer as the value of this parameter, your command must include the Credential parameter. The computer must either be configured for HTTPS transport, or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local computer. For information about adding a computer name to the WinRM TrustedHosts list, see "How to Add a Computer to the Trusted Host List" in about_Remote_Troubleshooting.
    .PARAMETER Credential
        Specifies a user account that has access rights to perform this action. If the parameter is not added, or no value is specified, the default value of this parameter is the current user. Enter a user name in one of the following formats. Quotation marks are optional.

        -- "UserName"

        -- "Domain\User"

        -- "User@Domain.com"

        -- A Credential object returned by the Get-Credential cmdlet.

        If a user name is entered, then a prompt for a password is displayed.
    .PARAMETER LogPath
        Specifies a name and path to a log file. Add this parameter if the results of this cmdlet must be stored in a log.
    #>
    
    [CmdletBinding(DefaultParameterSetName='RunningComputer', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.Windows.ServerManager.Commands.Feature[]]
        ${Name},
        
        [Parameter(ParameterSetName='VhdPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Vhd},
        
        [Parameter(ParameterSetName='RunningComputer')]
        [switch]
        ${Restart},
        
        [Parameter(ParameterSetName='VhdPath')]
        [Parameter(ParameterSetName='RunningComputer')]
        [switch]
        ${IncludeManagementTools},
        
        [switch]
        ${Remove},
        
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},
        
        [ValidateNotNullOrEmpty()]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${LogPath}
    )
}

function Disable-ServerManagerStandardUserRemoting {
    <#
    .SYNOPSIS
        Disables access for specified standard users to event, service, performance counter, and role and feature inventory data that is collected by Server Manager for a server. This cmdlet performs the opposite action, for specified users, of the Enable-ServerManagerStandardUserRemoting cmdlet.
    .PARAMETER User
        Specifies the user account name of a standard user who runs Server Manager, and no longer requires access to event, performance counter, service, and role and feature inventory data for a server that is being managed by using either a local or remote Server Manager console.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(Mandatory=$true, Position=0)]
        [string[]]
        ${User},
        
        [switch]
        ${Force}
    )
}

function Enable-ServerManagerStandardUserRemoting {
    <#
    .SYNOPSIS
        Provides one or more standard, non-Administrator users access to event, service, performance counter, and role and feature inventory data for a server that you are managing by using Server Manager.
    .PARAMETER User
        Specifies the user account name of a standard user who runs Server Manager, and requires access to event, performance counter, service, and role and feature inventory data for remote servers that are managed by using the local Server Manager console.
    #>
    
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(Mandatory=$true, Position=0)]
        [string[]]
        ${User},
        
        [switch]
        ${Force}
    )
}

function Get-WindowsFeature {
    <#
    .SYNOPSIS
        Gets information about Windows Server roles, role services, and features that are available for installation and installed on a specified server.
    .PARAMETER Name
        Specifies the command IDs of roles, role services, or features about which to return information.
    .PARAMETER Vhd
        Specifies the path to an offline VHD. The path can either point to a VHD file, or to a location on which the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.

        The VHD can be on a local disk on the target computer, or on a network shared folder. If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD. In this case, the computer account of the computer that you are using to mount the VHD must have read and write permissions (Read/Write permissions in the File Sharing dialog box, or Full Control on the Security tab of the folder Properties dialog box) on the shared folder, or the VHD will not be accessible. Local loopback UNC paths are not supported. Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.

        Add the ComputerName parameter to specify the target computer you want to use to mount the VHD. If the ComputerName parameter is not specified, then the local computer is used. The computer that you are using to mount the VHD must be running Windows Server 2012 R2. Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
    .PARAMETER ComputerName
        Gets the list of available roles, role services, and features from the specified remote computer that is running Windows Server 2012 R2. The parameter accepts only one computer name. If this parameter is not added, or no computer name is specified, the default target is the local computer. Valid values for the parameter include a NetBIOS name, an IP address, or a fully qualified domain name of a remote computer.

        To use a remote computer?s IP address as the value of this parameter, your command must include the Credential parameter. The computer must either be configured for HTTPS transport, or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local computer. For information about adding a computer name to the WinRM TrustedHosts list, see ?How to Add a Computer to the Trusted Host List? in about_Remote_Troubleshooting.
    .PARAMETER Credential
        Specifies a user account that has access rights to perform this action. If the parameter is not added, or no value is specified, the default value of this parameter is the current user. Enter a user name in one of the following formats. Quotation marks are optional.

        -- "UserName"

        -- "Domain\User"

        -- "User@Domain.com"

        -- A Credential object returned by the Get-Credential cmdlet.

        If a user name is entered, then a prompt for a password is displayed.
    .PARAMETER LogPath
        Specifies a name and path to a log file. Add this parameter if the results of this cmdlet must be stored in a log.
    #>
    
    [CmdletBinding()]
    param (
        [Parameter(Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Name},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${Vhd},
        
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},
        
        [ValidateNotNullOrEmpty()]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${LogPath}
    )
}

function Install-WindowsFeature {
    <#
    .SYNOPSIS
        Installs one or more roles, role services, or features on either the local or a specified remote server that is running Windows Server 2012 R2. This cmdlet is equivalent to and replaces Add-WindowsFeature, the cmdlet that was used to install roles, role services, and features in Windows Server 2008 R2.
    .PARAMETER Name
        Specifies a list of features to install. This parameter does not support wildcard characters. If this parameter is specified, then the ConfigurationFilePath parameter cannot be used.
    .PARAMETER ConfigurationFilePath
        Provides a single path to a configuration file which specifies roles and features to be installed, and any configuration parameters needed. The path can be specified by using a local relative path (such as D:\myfolder) or by using built-in environment variables prefixed with the $env tag (such as $env:systemdrive\filename). A configuration file can be generated by running the Add Roles and Features Wizard in Server Manager.

        If this parameter is specified, then the Name parameter cannot be used.
    .PARAMETER Vhd
        Specifies the path to an offline VHD. The path can either point to a VHD file, or to a location on which the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.

        The VHD can be on a local disk on the target computer, or on a network shared folder. If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD. In this case, the computer account of the computer that you are using to mount the VHD must have read and write permissions (Read/Write permissions in the File Sharing dialog box, or Full Control on the Security tab of the folder Properties dialog box) on the shared folder, or the VHD will not be accessible. Local loopback UNC paths are not supported. Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.

        Add the ComputerName parameter to specify the target computer you want to use to mount the VHD. If the ComputerName parameter is not specified, then the local computer is used. The computer that you are using to mount the VHD must be running Windows Server 2012 R2. Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
    .PARAMETER Restart
        Specifies that the target computer is restarted automatically, if a restart is required by the installation process for the specified roles or features. This parameter cannot be used with the Vhd parameter.
    .PARAMETER IncludeAllSubFeature
        Specifies that all subordinate role services, and all subfeatures of parent roles, role services, or features specified by the Name parameter should be installed.
    .PARAMETER IncludeManagementTools
        Specifies that all applicable management tools of the roles, role services, or features specified by the Name parameter should be installed. Note: Although management tools are installed by default when you are installing features by using the Add Roles and Features Wizard, management tools are not installed by default when you install features by using the Install-WindowsFeature cmdlet; this parameter must be added to install management tools.
    .PARAMETER Source
        Specifies the path to feature files, if the files are not available in the local feature store of the target computer or VHD. Valid values for this parameter are either a network path or the path to a Windows image file (WIM). If you are installing roles or features on an offline VHD, you must use a mounted WIM. It is not necessary to mount the WIM file for installing on a running physical computer, because a WIM is mounted internally for deployments to a physical computer. Specify the path by using a local relative path, or by using built-in environment variables that are prefixed with the $env tag as shown in the following examples.

        The path specified in this parameter is only used if the command cannot find feature files in the local side-by-side store of the specified target computer or VHD. The command searches for feature files in the following order:

        1)?On the target computer or offline VHD.

        2)?Path specified as the value of this parameter. If you add a UNC path, verify that the computer account of the target server has Read permissions on the share. The computer account should be in one of the following formats: DOMAIN\SERVERNAME$ or SERVER$

        3)?Repository path specified by the Group Policy Object (GPO), Specify settings for optional component installation and component repair, located in Computer Configuration/Administrative Templates/System in Local Group Policy Editor. This Group Policy setting controls the following Windows Registry setting: HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Servicing\LocalSourcePath.

        4)?Windows Update.

        This parameter is optional.
    .PARAMETER ComputerName
        Installs one or more available roles, role services, and features on a specified remote computer. This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified, the default target is the local computer.

        Valid values for the parameter include a NetBIOS name, an IP address, or a fully qualified domain name of a remote computer that is running Windows Server

        To use an IP address of a remote computer as the value of this parameter, your command must include the Credential parameter. The computer must either be configured for HTTPS transport, or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local computer. For information about adding a computer name to the WinRM TrustedHosts list, see ?How to Add a Computer to the Trusted Host List? in about_Remote_Troubleshooting.
    .PARAMETER Credential
        Specifies a user account that has access rights to perform this action. If the parameter is not added, or no value is specified, the default value of this parameter is the current user. Enter a user name in one of the following formats. Quotation marks are optional.

        ???"UserName"

        ???"Domain\User"

        ???"User@Domain.com"

        ??? A Credential object returned by the Get-Credential cmdlet.

        If a user name is entered, then a prompt for a password is displayed.
    .PARAMETER LogPath
        Specifies a name and path to a log file. Add this parameter if the results of your command must be stored in a log.
    #>
    
    [CmdletBinding(DefaultParameterSetName='ComponentNamesAndRunningComputer', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.Windows.ServerManager.Commands.Feature[]]
        ${Name},
        
        [Parameter(ParameterSetName='ConfigurationFile', Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ConfigurationFilePath},
        
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath', Mandatory=$true)]
        [Parameter(ParameterSetName='ConfigurationFile')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Vhd},
        
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [Parameter(ParameterSetName='ConfigurationFile')]
        [switch]
        ${Restart},
        
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath')]
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [switch]
        ${IncludeAllSubFeature},
        
        [Parameter(ParameterSetName='ComponentNamesAndRunningComputer')]
        [Parameter(ParameterSetName='ComponentNamesAndVhdPath')]
        [switch]
        ${IncludeManagementTools},
        
        [ValidateNotNullOrEmpty()]
        [string[]]
        ${Source},
        
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},
        
        [ValidateNotNullOrEmpty()]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${LogPath}
    )
}

function Uninstall-WindowsFeature {
    <#
    .SYNOPSIS
        Uninstalls specified Windows Server roles, role services, and features from a computer that is running Windows Server 2012 R2. By adding the Remove parameter, also deletes feature files, or payload, from a computer. This cmdlet replaces Remove-WindowsFeature, the cmdlet that was used to uninstall roles, role services, and features in Windows Server 2008 R2.
    .PARAMETER Name
        Specifies a list of features to uninstall. This parameter does not support wildcard characters.
    .PARAMETER Vhd
        Specifies the path to an offline VHD. The path can either point to a VHD file, or to a location on which the VHD is already mounted by using Deployment Image Servicing and Management (DISM) tools.

        The VHD can be on a local disk on the target computer, or on a network shared folder. If the VHD is in a network shared folder, then the value of this parameter is a UNC path to the VHD. In this case, the computer account of the computer that you are using to mount the VHD must have read and write permissions (Read/Write permissions in the File Sharing dialog box, or Full Control on the Security tab of the folder Properties dialog box) on the shared folder, or the VHD will not be accessible. Local loopback UNC paths are not supported. Use either of the following formats for the computer account: DOMAIN\SERVERNAME$ or SERVERNAME$.

        Add the ComputerName parameter to specify the target computer you want to use to mount the VHD. If the ComputerName parameter is not specified, then the local computer is used. The computer that you are using to mount the VHD must be running Windows Server 2012 R2. Any local path, such as D:\myFolder, that is specified by using this parameter is always relative to the target computer.
    .PARAMETER Restart
        Specifies that the target computer is restarted automatically, if a restart is required by the uninstallation process for the specified roles or features. This parameter cannot be used with the Vhd parameter.
    .PARAMETER IncludeManagementTools
        Specifies the uninstallation of all applicable management tools along with the roles, role services, or features that are specified in the Name parameter. Note that by default, management tools are not uninstalled when you run the Uninstall-WindowsFeature cmdlet; you must add this parameter to uninstall associated management tools.
    .PARAMETER Remove
        Deletes feature files for the specified roles, role services, and features from the side-by-side store, located at %SystemDrive%:\Windows\WinSxS. If the feature is not yet uninstalled, the command uninstalls the feature.

        When you delete feature files, features that depend upon the files you remove are also deleted. When you delete feature files for a subfeature, and no other subfeatures for the parent feature are installed, then files for the entire parent role or feature are deleted.
    .PARAMETER ComputerName
        Uninstalls and optionally removes one or more roles, role services, and features from a specified remote computer. This parameter accepts only one computer name. If this parameter is not added, or no computer name is specified, the default target is the local computer.

        Valid values for the parameter include a NetBIOS name, an IP address, or a fully qualified domain name of a remote computer that is running Windows Server.

        To use an IP address of a remote computer as the value of this parameter, your command must include the Credential parameter. The computer must either be configured for HTTPS transport, or the IP address of the remote computer must be included in the WinRM TrustedHosts list on the local computer. For information about adding a computer name to the WinRM TrustedHosts list, see "How to Add a Computer to the Trusted Host List" in about_Remote_Troubleshooting.
    .PARAMETER Credential
        Specifies a user account that has access rights to perform this action. If the parameter is not added, or no value is specified, the default value of this parameter is the current user. Enter a user name in one of the following formats. Quotation marks are optional.

        -- "UserName"

        -- "Domain\User"

        -- "User@Domain.com"

        -- A Credential object returned by the Get-Credential cmdlet.

        If a user name is entered, then a prompt for a password is displayed.
    .PARAMETER LogPath
        Specifies a name and path to a log file. Add this parameter if the results of this cmdlet must be stored in a log.
    #>
    
    [CmdletBinding(DefaultParameterSetName='RunningComputer', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
    param (
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [Microsoft.Windows.ServerManager.Commands.Feature[]]
        ${Name},
        
        [Parameter(ParameterSetName='VhdPath')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Vhd},
        
        [Parameter(ParameterSetName='RunningComputer')]
        [switch]
        ${Restart},
        
        [Parameter(ParameterSetName='VhdPath')]
        [Parameter(ParameterSetName='RunningComputer')]
        [switch]
        ${IncludeManagementTools},
        
        [switch]
        ${Remove},
        
        [Alias('Cn')]
        [ValidateNotNullOrEmpty()]
        [string]
        ${ComputerName},
        
        [ValidateNotNullOrEmpty()]
        [pscredential]
        [System.Management.Automation.CredentialAttribute()]
        ${Credential},
        
        [ValidateNotNullOrEmpty()]
        [string]
        ${LogPath}
    )
}

